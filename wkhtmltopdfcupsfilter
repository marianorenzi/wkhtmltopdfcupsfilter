#! /bin/bash

# Get an attribute from the ppd file
getAttribute () {
  ATTRIBUTE=$1
  
  VALUE=`grep "^\*$ATTRIBUTE:" "$PPD"`
  if [ $? -ne 0 ]; then
    exit 1
  fi
  
  regex="\*$ATTRIBUTE:[[:space:]]+(\w+)"
  if [[ "${VALUE}" =~ $regex ]]; then
    VALUE="${BASH_REMATCH[1]}"
  else
    echo "DEBUG: getAttribute RegEx failed. $regex" >&2
    exit 1
  fi
  echo "DEBUG: Attribute $ATTRIBUTE is $VALUE" >&2
  echo "$VALUE"
}

# Get dimensions from a specific PageSize entry
getPddPageSize () {
  SIZE=$1
  
  VALUE=`grep "^\*PageSize[[:space:]]$SIZE" "$PPD"`
  if [ $? -ne 0 ]; then
    exit 1
  fi
  
  regex="PageSize[[:space:]]$SIZE.+:[[:space:]]\"<<\/PageSize\[([0-9]+)[[:space:]]([0-9]+)\]>>setpagedevice\""
  if [[ ! "${VALUE}" =~ $regex ]]; then
    echo "DEBUG: getPddPageSize RegEx failed. $regex" >&2
    exit 1
  fi
  echo "${BASH_REMATCH[1]} ${BASH_REMATCH[2]}"
}

# Get an option for the document: either default ppd attribute or user-provided value
getOption () {
  OPTION=$1
  VALUE=$(getAttribute Default$OPTION)

  if [ -n "$OPTIONS" ]
  then
    # Case of the very first option
    if [ -z "${OPTIONS/$OPTION=*}" ]
    then
      VALUE=${OPTIONS#$OPTION=}
      VALUE=${VALUE%% *}
    fi
    # Case of other options
    if [ -z "${OPTIONS/* $OPTION=*}" ]
    then
      VALUE=${OPTIONS##* $OPTION=}
      VALUE=${VALUE%% *}
    fi

    # Boolean options
    if [ -z "${OPTIONS/* $OPTION *}" ]
    then
      VALUE=True
    fi
    if [ -z "${OPTIONS/* no$OPTION *}" ]
    then
      VALUE=False
    fi
  fi

  echo "DEBUG: Option $OPTION value is $VALUE" >&2
  echo "$VALUE"
}

# Get an option for the document and check that it is a number
getOptionNumber () {
  OPTION=$1
  VALUE=$(getOption $OPTION)
  VALUE=${VALUE#Custom.}
  case "$VALUE" in
    [0-9]*) ;;
    *) echo "ERROR: Option $OPTION must be a number, got $VALUE" >&2
       exit 1
       ;;
  esac
  echo "$VALUE"
}

# Convert from points (1/72 of inch) to 1/100th of mm
points2mm() {
  printf %.1f $(bc -l <<< "1/72 * 25.4 * $1")
}

cupsPageSizeHandle() {
  CUSTOMPAGE=false
  PAGEWIDTH=0
  PAGEHEIGHT=0
  
  PAGESIZE=$(getOption PageSize)
  if [ -z "$PAGESIZE" ]
  then
    echo "DEBUG: PageSize option not found. Defaulting to A4" >&2
    PAGESIZE="A4"
  fi
  
  shopt -s nocasematch
  case "$PAGESIZE" in
    A0) ;;
    A1) ;;
    A2) ;;
    A3) ;;
    A4) ;;
    A5) ;;
    A6) ;;
    A7) ;;
    A8) ;;
    A9) ;;
    B0) ;;
    B1) ;;
    B2) ;;
    B3) ;;
    B4) ;;
    B5) ;;
    B6) ;;
    B7) ;;
    B8) ;;
    B9) ;;
    B10) ;;
    C5E) ;;
    Comm10E) ;;
    DLE) ;;
    Executive) ;;
    Folio) ;;
    Ledger) ;;
    Legal) ;;
    Letter) ;;
    Tabloid) ;;
    Custom.*)
      regex="^Custom.([0-9]+)x([0-9]+)"
      if [[ "${PAGESIZE}" =~ $regex ]]; then
        CUSTOMPAGE=true
        PAGEWIDTH="${BASH_REMATCH[1]}"
        PAGEHEIGHT="${BASH_REMATCH[2]}"
        PAGEWIDTH=$(points2mm $PAGEWIDTH)
        PAGEHEIGHT=$(points2mm $PAGEHEIGHT)
      else
        echo "DEBUG: Custom PageSize RegEx failed. $regex" >&2
        exit 1
      fi
      ;;
    *)
      CUSTOMPAGE=true
      DIMENSIONS=( $(getPddPageSize $PAGESIZE) )
      if [ $? -ne 0 ]
      then
        echo "DEBUG: Failed to retrieve PageSize config for $PAGESIZE from PDD. Defaulting to A4." >&2
        CUSTOMPAGE=false
        PAGESIZE="A4"
      else
        PAGEWIDTH=$(points2mm ${DIMENSIONS[0]})
        PAGEHEIGHT=$(points2mm ${DIMENSIONS[1]})
      fi
      ;;
  esac
  
  echo "${CUSTOMPAGE} ${PAGESIZE} ${PAGEWIDTH} ${PAGEHEIGHT}"
}

cupsGrayscaleHandle() {
  COLORSUPPORT=$(getAttribute ColorDevice)
  if [ $? -ne 0 ]; then
    echo "DEBUG: Failed to retrieve ColorDevice attribute. Defaulting to true." >&2
    echo "true"
  fi
  
  echo "$COLORSUPPORT"
}

# Make sure we have enough options
if [ $# != 5 -a $# != 6 ]; then
  echo "ERROR: $0 jobid user name nb options [filename]" >&2
  exit 1
fi

NB=$4
OPTIONS=$5
INFILE=$6

# handle print copies
WKOPTIONS="--copies $NB"

# handle page sizes options
RESULT=( $(cupsPageSizeHandle) )
CUSTOMPAGE=${RESULT[0]}
PAGESIZE=${RESULT[1]}
PAGEWIDTH=${RESULT[2]}
PAGEHEIGHT=${RESULT[3]}
echo "DEBUG: PAGESIZE=$PAGESIZE" >&2
echo "DEBUG: CUSTOMPAGE=$CUSTOMPAGE" >&2
if [ "${CUSTOMPAGE,,}" = "true" ]
then
  echo "DEBUG: PAGEWIDTH=${PAGEWIDTH}mm" >&2
  echo "DEBUG: PAGEHEIGHT=${PAGEHEIGHT}mm" >&2
  WKOPTIONS+=" --page-width $PAGEWIDTH --page-height $PAGEHEIGHT"
else
  if [ -n "$PAGESIZE" ] && [ "$PAGESIZE" != "A4" ]
  then
    WKOPTIONS+=" --page-size $PAGESIZE"
  fi
fi

# handle grayscale options
COLORSUPPORT=$(cupsGrayscaleHandle)
echo "DEBUG: COLORSUPPORT=$COLORSUPPORT" >&2
if [ "${COLORSUPPORT,,}" = "false" ]
then
  WKOPTIONS+=" -g"
fi

echo "INFO: Running command line for wkhtmltopdf. Options=$WKOPTIONS" >&2

set -meuo pipefail

if [ -z $INFILE ]
then
  INFILE="-"
fi

wkhtmltopdfCmd() {
  FILEDATA=$(cat $INFILE)
  wkhtmltopdf $WKOPTIONS - - <<< $FILEDATA
}
(wkhtmltopdfCmd) | cat

echo "INFO: Ready" >&2
exit 0
